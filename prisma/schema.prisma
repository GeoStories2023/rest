// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid             String         @id
  username        String         @unique @default(cuid())
  askUsername     Boolean        @default(true)
  status          String         @default("")
  profileImageUrl String?
  isPremium       Boolean        @default(false)
  isAdmin         Boolean        @default(false)
  dateCreated     DateTime       @default(now())
  dateUpdated     DateTime       @default(now()) @updatedAt
  xp              Int            @default(0)
  startedTours    StartedTour[]
  coupons         Coupon[]
  favoriteTours   FavoriteTour[]
  friends         Friend[]       @relation(name: "user")
  friendUsers     Friend[]       @relation(name: "friend_user")
  Diary           Diary[]
}

model Friend {
  id           String   @id @default(uuid())
  user         User     @relation(name: "user", fields: [userId], references: [uid])
  userId       String
  friendUser   User     @relation(name: "friend_user", fields: [friendUserId], references: [uid])
  friendUserId String
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt

  @@unique([userId, friendUserId])
}

model Level {
  id          String @id @default(uuid())
  name        String
  description String @default("")
  xp          Int    @default(0)
}

model Company {
  id          String   @id @default(uuid())
  name        String
  description String   @default("")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
  coupons     Coupon[]
}

model Coupon {
  id          String   @id @default(uuid())
  code        String
  description String   @default("")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
  user        User?    @relation(fields: [userId], references: [uid])
  userId      String?
}

model FavoriteTour {
  id          String   @id @default(uuid())
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
  tourId      String
  tour        Tour     @relation(fields: [tourId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [uid])
}

model StartedTour {
  id                String                   @id @default(uuid())
  isCompleted       Boolean                  @default(false)
  dateStarted       DateTime                 @default(now())
  dateEnded         DateTime?
  tourId            String
  tour              Tour                     @relation(fields: [tourId], references: [id])
  userId            String
  user              User                     @relation(fields: [userId], references: [uid])
  visitedTourPoints TourPointOnStartedTour[]
}

model Continent {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String?
  countries Country[]
}

model Country {
  id          String    @id @default(uuid())
  name        String
  continentId String
  continent   Continent @relation(fields: [continentId], references: [id])
  imageUrl    String?
  cities      City[]
}

model City {
  id        String  @id @default(uuid())
  name      String
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  imageUrl  String?
  tours     Tour[]
}

model TourPointType {
  id          String      @id @default(uuid())
  name        String
  tourPoints  TourPoint[]
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt
}

model TourPoint {
  id           String                   @id @default(uuid())
  typeId       String
  name         String
  type         TourPointType            @relation(fields: [typeId], references: [id])
  longitude    Float
  latitude     Float
  description  String                   @default("")
  dateCreated  DateTime                 @default(now())
  dateUpdated  DateTime                 @default(now()) @updatedAt
  tour         Tour?                    @relation(fields: [tourId], references: [id])
  tourId       String?
  startedTours TourPointOnStartedTour[]
}

model TourPointOnStartedTour {
  id            String      @id @default(uuid())
  tourPointId   String
  tourPoint     TourPoint   @relation(fields: [tourPointId], references: [id])
  startedTour   StartedTour @relation(fields: [startedTourId], references: [id])
  startedTourId String
  dateCreated   DateTime    @default(now())
  dateUpdated   DateTime    @default(now()) @updatedAt
}

model Tour {
  id            String         @id @default(uuid())
  name          String
  description   String         @default("")
  tourPoints    TourPoint[]
  duration      Int            @default(0)
  imageUrl      String?
  dateCreated   DateTime       @default(now())
  dateUpdated   DateTime       @default(now()) @updatedAt
  xp            Int            @default(0)
  startedTours  StartedTour[]
  city          City?          @relation(fields: [cityId], references: [id])
  cityId        String?
  favoriteTours FavoriteTour[]
  Diary         Diary[]
}

model News {
  id          String   @id @default(uuid())
  title       String
  content     String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
  imageUrl    String?
}

model Achievement {
  id          String   @id @default(uuid())
  name        String
  description String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
  imageUrl    String?
}

model Diary {
  id          String   @id @default(uuid())
  title       String   @default("")
  content     String   @default("")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
  tourId      String
  tour        Tour     @relation(fields: [tourId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [uid])
}
